{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "ArcBehaviors",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "variables-context-builder-mixin.html",
        "start": {
          "line": 22,
          "column": 2
        },
        "end": {
          "line": 22,
          "column": 27
        }
      },
      "mixins": [
        {
          "description": "A behavior to be implemented to elements that needs to prepare a list of\ncurrently loaded variables.\n\nIt works with `variables-manager` that must be inserted into the DOM\nto query for list of current variables for current environment.",
          "summary": "",
          "path": "variables-context-builder-mixin.html",
          "properties": [
            {
              "name": "functionRegex",
              "type": "RegExp | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 8
                },
                "end": {
                  "line": 81,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "RegExp"
                }
              }
            },
            {
              "name": "context",
              "type": "Object | null | undefined",
              "description": "Cached context for current operation.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 8
                },
                "end": {
                  "line": 83,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "buildContext",
              "description": "Requests for a variables list from the variables manager\nand creates a context for Jexl.\n\nIf the `variables-manager` is not present it returns empty object.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 99,
                  "column": 4
                },
                "end": {
                  "line": 135,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "override",
                  "type": "Object",
                  "description": "Map of key - value pars to override variables\nor to add temporary variables to the context. Values for keys that\nexists in variables array (the `variable` property) will update value of\nthe variable. Rest is added to the list."
                }
              ],
              "return": {
                "type": "Promise",
                "desc": "Promise resolved to a context to be passed to Jaxl."
              }
            },
            {
              "name": "_processContextVariables",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 137,
                  "column": 4
                },
                "end": {
                  "line": 166,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "result"
                },
                {
                  "name": "variables"
                },
                {
                  "name": "requireEvaluation"
                },
                {
                  "name": "runCount"
                }
              ]
            },
            {
              "name": "evaluateVariable",
              "description": "Evaluates a value against a variables.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 176,
                  "column": 4
                },
                "end": {
                  "line": 195,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "String",
                  "description": "A value to evaluate"
                },
                {
                  "name": "context",
                  "type": "?Object",
                  "description": "Optional. Context for Jexl. If not set it will\nget a context from variables manager."
                }
              ],
              "return": {
                "type": "Promise",
                "desc": "Promise that resolves to evaluated value."
              }
            },
            {
              "name": "_evaluateWithContext",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 197,
                  "column": 4
                },
                "end": {
                  "line": 232,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "context"
                },
                {
                  "name": "value"
                }
              ]
            },
            {
              "name": "evaluateVariables",
              "description": "Recursively evaluate variables on an object.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 241,
                  "column": 4
                },
                "end": {
                  "line": 253,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj",
                  "type": "Object",
                  "description": "The map containg variables"
                },
                {
                  "name": "props",
                  "type": "?Array.<String>",
                  "description": "Optional, list of properties to evaluate.\nIf not set then it scans for all keys in the object."
                }
              ],
              "return": {
                "type": "Promise",
                "desc": "Promise resolved to evalusated object."
              }
            },
            {
              "name": "_updgradeLegacy",
              "description": "Upgrades old syntax of magic variables to new one.\nIt replaces `${now}` and `${random}` to function calls: `now()` and\n`random()`. It also keeps grouping.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 262,
                  "column": 4
                },
                "end": {
                  "line": 286,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "String",
                  "description": "Currently evaluated value"
                }
              ],
              "return": {
                "type": "String",
                "desc": "Parsed value without old syntax."
              }
            },
            {
              "name": "_evalFunctions",
              "description": "Evaluates functions.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 294,
                  "column": 4
                },
                "end": {
                  "line": 312,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "String",
                  "description": "A value to evaluate"
                }
              ],
              "return": {
                "type": "String",
                "desc": "Evaluated value with removed functions."
              }
            },
            {
              "name": "_callFn",
              "description": "Calls one of the predefined functions and returns its value.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 320,
                  "column": 4
                },
                "end": {
                  "line": 340,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "fnName",
                  "type": "String",
                  "description": "A function name to call."
                },
                {
                  "name": "args",
                  "type": "?Array",
                  "description": "Arguments find in the expression."
                }
              ],
              "return": {
                "type": "String",
                "desc": "Result of calling a function. Always a string."
              }
            },
            {
              "name": "_prepareMultilineValue",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 342,
                  "column": 4
                },
                "end": {
                  "line": 352,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "lines"
                }
              ]
            },
            {
              "name": "_prepareValue",
              "description": "Replaces strings witht quoted string and variables notation into\nvariables that Jexl will understand.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 361,
                  "column": 4
                },
                "end": {
                  "line": 392,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "String",
                  "description": "Value to evaluate"
                }
              ],
              "return": {
                "type": "String",
                "desc": "Proper syntax for Jexl"
              }
            },
            {
              "name": "_callNamespaceFunction",
              "description": "Calls JavaScript native function.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 401,
                  "column": 4
                },
                "end": {
                  "line": 415,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "namespace",
                  "type": "[type]",
                  "description": "[description]"
                },
                {
                  "name": "fn",
                  "type": "Function",
                  "description": "[description]"
                },
                {
                  "name": "args",
                  "type": "[type]",
                  "description": "[description]"
                }
              ],
              "return": {
                "type": "[type]",
                "desc": "[description]"
              }
            },
            {
              "name": "_applyArgumentsContext",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 417,
                  "column": 4
                },
                "end": {
                  "line": 425,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "arg"
                },
                {
                  "name": "context"
                }
              ]
            },
            {
              "name": "__evalFnNow",
              "description": "Calls the `now()` function. Returns current timestamp.\nIf argument is passed is will try to retreive existing cached value\nor create new one.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 434,
                  "column": 4
                },
                "end": {
                  "line": 448,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "type": "Array",
                  "description": "Arguments passed to the function"
                }
              ],
              "return": {
                "type": "Number",
                "desc": "Current timestamp"
              }
            },
            {
              "name": "__evalFnRandom",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 450,
                  "column": 4
                },
                "end": {
                  "line": 464,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ]
            },
            {
              "name": "__randomInt",
              "description": "Returns a random `int` between 0 (inclusive) and\n`Number.MAX_SAFE_INTEGER` (exclusive) with roughly equal probability of\nreturning any particular `int` in this range.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 470,
                  "column": 4
                },
                "end": {
                  "line": 474,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "__evalFnEncodeURIComponent",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 476,
                  "column": 4
                },
                "end": {
                  "line": 482,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ]
            },
            {
              "name": "__evalFnDecodeURIComponent",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 484,
                  "column": 4
                },
                "end": {
                  "line": 490,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 0
            },
            "end": {
              "line": 493,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "ArcBehaviors.VariablesContextBuilderMixin",
          "attributes": [
            {
              "name": "function-regex",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 8
                },
                "end": {
                  "line": 81,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "RegExp | null | undefined"
            },
            {
              "name": "context",
              "description": "Cached context for current operation.",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 8
                },
                "end": {
                  "line": 83,
                  "column": 23
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  ],
  "elements": [
    {
      "description": "`<variables-evaluator>` Variables evaluator for the Advanced REST Client\n\nThe element listens for `before-request` custom event and evaluates its\nproperties. This element is responsible for applying variables to the request.\n\nThis elements works with `variables-manager`. When evaluation has been requested\nit asks the manager for list of current variables. After the list is evaluated\nthen the requested value is evaluated for the variables.\n\n### Example\n\n```html\n<variables-evaluator></variables-evaluator>\n```\n\nA value can be evaluated on demand by dispatching `evaluate-variable` custom\nevent. It will perform evaluation on the `value` property of the detail object.\nThe element adds a `result` property to the detail object which is a Promise\nthat resolves to a value.\nThe event is cancelled and it's propagation is stopped so other evaluators won't\nperform the same task again.\n\n### Example\n\n```javascript\n// requesting to create an environment\nconst e = new CustomEvent('evaluate-variable', {\n   bubbles: true,\n   composed: true,\n   cancelable: true,\n   detail: {\n     value: 'The timestamp is now() and generating random() value'\n   }\n});\ndocument.dispatchEvent(e);\nconsole.log(e.defaultPrevented); // true\ne.detail.result.then(function(value) {\n   console.log(value);\n})\n.catch(function(cause) {\n   console.log(cause.message);\n});\n```\n\n## Changes in 2.0\n\nJexl is now optional dependency. Install it from other sources and include into\nthe web app. The web component version is offered by `advanced-rest-client/Jexl#^2.0.0`.\nNode version can be installed from `npm install jexl --save`.\nThis prevents double inclusion in Electron environment.",
      "summary": "",
      "path": "variables-evaluator.html",
      "properties": [
        {
          "name": "functionRegex",
          "type": "RegExp | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "RegExp"
            }
          },
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "context",
          "type": "Object | null | undefined",
          "description": "Cached context for current operation.",
          "privacy": "public",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 83,
              "column": 8
            },
            "end": {
              "line": 83,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "cache",
          "type": "Object | null | undefined",
          "description": "A cache object for groupping",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 6
            },
            "end": {
              "line": 84,
              "column": 19
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "noBeforeRequest",
          "type": "boolean | null | undefined",
          "description": "If set it will not handle `before-request` event",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 6
            },
            "end": {
              "line": 86,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "buildContext",
          "description": "Requests for a variables list from the variables manager\nand creates a context for Jexl.\n\nIf the `variables-manager` is not present it returns empty object.",
          "privacy": "public",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 135,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "override",
              "type": "Object",
              "description": "Map of key - value pars to override variables\nor to add temporary variables to the context. Values for keys that\nexists in variables array (the `variable` property) will update value of\nthe variable. Rest is added to the list."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a context to be passed to Jaxl."
          },
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "_processContextVariables",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 137,
              "column": 4
            },
            "end": {
              "line": 166,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "result"
            },
            {
              "name": "variables"
            },
            {
              "name": "requireEvaluation"
            },
            {
              "name": "runCount"
            }
          ],
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "evaluateVariable",
          "description": "Evaluates a value against a variables.",
          "privacy": "public",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 176,
              "column": 4
            },
            "end": {
              "line": 195,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "String",
              "description": "A value to evaluate"
            },
            {
              "name": "context",
              "type": "?Object",
              "description": "Optional. Context for Jexl. If not set it will\nget a context from variables manager."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise that resolves to evaluated value."
          },
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "_evaluateWithContext",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 197,
              "column": 4
            },
            "end": {
              "line": 232,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "evaluateVariables",
          "description": "Recursively evaluate variables on an object.",
          "privacy": "public",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 241,
              "column": 4
            },
            "end": {
              "line": 253,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "The map containg variables"
            },
            {
              "name": "props",
              "type": "?Array.<String>",
              "description": "Optional, list of properties to evaluate.\nIf not set then it scans for all keys in the object."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to evalusated object."
          },
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "_updgradeLegacy",
          "description": "Upgrades old syntax of magic variables to new one.\nIt replaces `${now}` and `${random}` to function calls: `now()` and\n`random()`. It also keeps grouping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 262,
              "column": 4
            },
            "end": {
              "line": 286,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "String",
              "description": "Currently evaluated value"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Parsed value without old syntax."
          },
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "_evalFunctions",
          "description": "Evaluates functions.",
          "privacy": "protected",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 294,
              "column": 4
            },
            "end": {
              "line": 312,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "String",
              "description": "A value to evaluate"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Evaluated value with removed functions."
          },
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "_callFn",
          "description": "Calls one of the predefined functions and returns its value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 320,
              "column": 4
            },
            "end": {
              "line": 340,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "fnName",
              "type": "String",
              "description": "A function name to call."
            },
            {
              "name": "args",
              "type": "?Array",
              "description": "Arguments find in the expression."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Result of calling a function. Always a string."
          },
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "_prepareMultilineValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 342,
              "column": 4
            },
            "end": {
              "line": 352,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "lines"
            }
          ],
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "_prepareValue",
          "description": "Replaces strings witht quoted string and variables notation into\nvariables that Jexl will understand.",
          "privacy": "protected",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 361,
              "column": 4
            },
            "end": {
              "line": 392,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "String",
              "description": "Value to evaluate"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Proper syntax for Jexl"
          },
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "_callNamespaceFunction",
          "description": "Calls JavaScript native function.",
          "privacy": "protected",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 401,
              "column": 4
            },
            "end": {
              "line": 415,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "namespace",
              "type": "[type]",
              "description": "[description]"
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "[description]"
            },
            {
              "name": "args",
              "type": "[type]",
              "description": "[description]"
            }
          ],
          "return": {
            "type": "[type]",
            "desc": "[description]"
          },
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "_applyArgumentsContext",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 417,
              "column": 4
            },
            "end": {
              "line": 425,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arg"
            },
            {
              "name": "context"
            }
          ],
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "__evalFnNow",
          "description": "Calls the `now()` function. Returns current timestamp.\nIf argument is passed is will try to retreive existing cached value\nor create new one.",
          "privacy": "private",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 448,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args",
              "type": "Array",
              "description": "Arguments passed to the function"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Current timestamp"
          },
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "__evalFnRandom",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 450,
              "column": 4
            },
            "end": {
              "line": 464,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "__randomInt",
          "description": "Returns a random `int` between 0 (inclusive) and\n`Number.MAX_SAFE_INTEGER` (exclusive) with roughly equal probability of\nreturning any particular `int` in this range.",
          "privacy": "private",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 470,
              "column": 4
            },
            "end": {
              "line": 474,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "__evalFnEncodeURIComponent",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 476,
              "column": 4
            },
            "end": {
              "line": 482,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "__evalFnDecodeURIComponent",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 484,
              "column": 4
            },
            "end": {
              "line": 490,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 86,
              "column": 5
            },
            "end": {
              "line": 91,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 104,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_beforeRequestHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "processBeforeRequest",
          "description": "A function to call directly on the element to process request object on\nbefore request event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 2
            },
            "end": {
              "line": 130,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object to process."
            },
            {
              "name": "override",
              "type": "Object",
              "description": "Optional. If not set then it clears the context\nand builds new one. Map of key-value pars to override variables\nor to add temporary variables to the context. Values for keys that\nexists in variables array (the `variable` property) will update value of\nthe variable. Rest is added to the list."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to a request object."
          }
        },
        {
          "name": "_processBeforeRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 2
            },
            "end": {
              "line": 159,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request"
            },
            {
              "name": "override"
            },
            {
              "name": "resolve"
            },
            {
              "name": "reject"
            }
          ]
        },
        {
          "name": "_evaluateVariableHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 2
            },
            "end": {
              "line": 172,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_processVariableEvaluation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 2
            },
            "end": {
              "line": 182,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "resolve"
            },
            {
              "name": "reject"
            }
          ]
        },
        {
          "name": "_findInCache",
          "description": "Finds cached group.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 2
            },
            "end": {
              "line": 198,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "A key where a function keeps cached objects"
            },
            {
              "name": "group",
              "type": "String",
              "description": "Group name. Defined by user as an argument."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Cached value."
          }
        },
        {
          "name": "_storeCache",
          "description": "Stores value in cache.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 2
            },
            "end": {
              "line": 214,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "A key where a function keeps cached objects"
            },
            {
              "name": "group",
              "type": "String",
              "description": "Group name. Defined by user as an argument."
            },
            {
              "name": "value",
              "type": "String",
              "description": "Cached value."
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 76,
          "column": 0
        },
        "end": {
          "line": 215,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "LogicElements.VariablesEvaluator",
      "attributes": [
        {
          "name": "function-regex",
          "description": "",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {},
          "type": "RegExp | null | undefined",
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "context",
          "description": "Cached context for current operation.",
          "sourceRange": {
            "file": "variables-context-builder-mixin.html",
            "start": {
              "line": 83,
              "column": 8
            },
            "end": {
              "line": 83,
              "column": 23
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "ArcBehaviors.VariablesContextBuilderMixin"
        },
        {
          "name": "events-target",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "cache",
          "description": "A cache object for groupping",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 6
            },
            "end": {
              "line": 84,
              "column": 19
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "no-before-request",
          "description": "If set it will not handle `before-request` event",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 6
            },
            "end": {
              "line": 86,
              "column": 30
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "variables-evaluator",
      "mixins": [
        "ArcBehaviors.VariablesContextBuilderMixin",
        "ArcBehaviors.EventsTargetBehavior"
      ]
    }
  ],
  "classes": [
    {
      "description": "",
      "summary": "",
      "path": "variables-context-builder-mixin.html",
      "properties": [],
      "methods": [
        {
          "name": "next",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 2
            },
            "end": {
              "line": 35,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "nextUntil",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 2
            },
            "end": {
              "line": 49,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "char"
            }
          ]
        },
        {
          "name": "eof",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 2
            },
            "end": {
              "line": 55,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 25,
          "column": 0
        },
        "end": {
          "line": 56,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "VariablesTokenizer"
    }
  ]
}
