/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   variables-context-builder-mixin.html
 */

/// <reference path="../polymer/types/lib/utils/mixin.d.ts" />
/// <reference path="../jexl/jexl.d.ts" />

declare namespace ArcBehaviors {


  /**
   * A behavior to be implemented to elements that needs to prepare a list of
   * currently loaded variables.
   *
   * It works with `variables-manager` that must be inserted into the DOM
   * to query for list of current variables for current environment.
   */
  function VariablesContextBuilderMixin<T extends new (...args: any[]) => {}>(base: T): T & VariablesContextBuilderMixinConstructor;

  interface VariablesContextBuilderMixinConstructor {
    new(...args: any[]): VariablesContextBuilderMixin;
  }

  interface VariablesContextBuilderMixin {
    functionRegex: RegExp|null|undefined;

    /**
     * Cached context for current operation.
     */
    context: object|null|undefined;

    /**
     * Requests for a variables list from the variables manager
     * and creates a context for Jexl.
     *
     * If the `variables-manager` is not present it returns empty object.
     *
     * @param override Map of key - value pars to override variables
     * or to add temporary variables to the context. Values for keys that
     * exists in variables array (the `variable` property) will update value of
     * the variable. Rest is added to the list.
     * @returns Promise resolved to a context to be passed to Jaxl.
     */
    buildContext(override: object|null): Promise<any>|null;
    _processContextVariables(result: any, variables: any, requireEvaluation: any, runCount: any): any;

    /**
     * Evaluates a value against a variables.
     *
     * @param value A value to evaluate
     * @param context Optional. Context for Jexl. If not set it will
     * get a context from variables manager.
     * @returns Promise that resolves to evaluated value.
     */
    evaluateVariable(value: String|null, context: object|null): Promise<any>|null;
    _evaluateWithContext(context: any, value: any): any;

    /**
     * Recursively evaluate variables on an object.
     *
     * @param obj The map containg variables
     * @param props Optional, list of properties to evaluate.
     * If not set then it scans for all keys in the object.
     * @returns Promise resolved to evalusated object.
     */
    evaluateVariables(obj: object|null, props: Array<String|null>|null): Promise<any>|null;

    /**
     * Upgrades old syntax of magic variables to new one.
     * It replaces `${now}` and `${random}` to function calls: `now()` and
     * `random()`. It also keeps grouping.
     *
     * @param value Currently evaluated value
     * @returns Parsed value without old syntax.
     */
    _updgradeLegacy(value: String|null): String|null;

    /**
     * Evaluates functions.
     *
     * @param value A value to evaluate
     * @returns Evaluated value with removed functions.
     */
    _evalFunctions(value: String|null): String|null;

    /**
     * Calls one of the predefined functions and returns its value.
     *
     * @param fnName A function name to call.
     * @param args Arguments find in the expression.
     * @returns Result of calling a function. Always a string.
     */
    _callFn(fnName: String|null, args: any[]|null): String|null;
    _prepareMultilineValue(lines: any): any;

    /**
     * Replaces strings witht quoted string and variables notation into
     * variables that Jexl will understand.
     *
     * @param value Value to evaluate
     * @returns Proper syntax for Jexl
     */
    _prepareValue(value: String|null): String|null;

    /**
     * Calls JavaScript native function.
     *
     * @param namespace [description]
     * @param fn [description]
     * @param args [description]
     * @returns [description]
     */
    _callNamespaceFunction(namespace: any, fn: Function|null, args: any): any;
    _applyArgumentsContext(arg: any, context: any): any;
  }
}

declare class VariablesTokenizer {
  next(): any;
  nextUntil(char: any): any;
  eof(): any;
}
